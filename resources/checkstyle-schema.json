{
    "id": "https://raw.githubusercontent.com/HaxeCheckstyle/haxe-checkstyle/dev/resources/checkstyle-schema.json",
    "$ref": "#/definitions/Config",
    "$schema": "http://json-schema.org/schema#",
    "definitions": {
        "HexadecimalLiteralCheck": {
            "type": "object",
            "description": "Checks the letter case of hexadecimal literals.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks the letter case of hexadecimal literals.",
                    "properties": {
                        "option": {
                            "enum": [
                                "upperCase",
                                "lowerCase"
                            ],
                            "type": "string",
                            "description": "policy for hexadecimal literals\n\t    - upperCase = use uppercase for all letters\n\t    - lowerCase = use lowercase for all letters",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "HexadecimalLiteral"
                    ],
                    "type": "string",
                    "description": "Checks the letter case of hexadecimal literals."
                }
            },
            "additionalProperties": false
        },
        "ERegLiteralCheck": {
            "type": "object",
            "description": "Checks for usage of EReg literals (between ~/ and /) instead of new.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for usage of EReg literals (between ~/ and /) instead of new.",
                    "properties": {
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 0
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "ERegLiteral"
                    ],
                    "type": "string",
                    "description": "Checks for usage of EReg literals (between ~/ and /) instead of new."
                }
            },
            "additionalProperties": false
        },
        "NestedForDepthCheck": {
            "type": "object",
            "description": "Restricts nested loop blocks to a specified depth (default = 1).",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Restricts nested loop blocks to a specified depth (default = 1).",
                    "properties": {
                        "max": {
                            "type": "integer",
                            "description": "maximum number of nested loops allowed\n\t\tsetting \"max\" to 1 allows one inner loop",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "NestedForDepth"
                    ],
                    "type": "string",
                    "description": "Restricts nested loop blocks to a specified depth (default = 1)."
                }
            },
            "additionalProperties": false
        },
        "DynamicCheck": {
            "type": "object",
            "description": "Checks for use of Dynamic type anywhere in the code.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for use of Dynamic type anywhere in the code.",
                    "properties": {
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 0
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "Dynamic"
                    ],
                    "type": "string",
                    "description": "Checks for use of Dynamic type anywhere in the code."
                }
            },
            "additionalProperties": false
        },
        "UnusedImportCheck": {
            "type": "object",
            "description": "Checks for unused or duplicate imports.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for unused or duplicate imports.",
                    "properties": {
                        "moduleTypeMap": {
                            "type": "object",
                            "description": "modules that define multiple types may show up as unused, unless \"moduleTypeMap\" contains a mapping for it\n\t\te.g. \"haxe.macro.Expr\": [\"ExprDef\", \"ComplexType\"] - would allow \"import haxe.macro.Expr;\" even though you just use \"ComplexType\"",
                            "propertyOrder": 1
                        },
                        "ignoreModules": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "list of module names to ignore, any module from \"ignoreModules\" won't show up as unused in any file during a run",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 2
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "UnusedImport"
                    ],
                    "type": "string",
                    "description": "Checks for unused or duplicate imports."
                }
            },
            "additionalProperties": false
        },
        "HiddenFieldCheck": {
            "type": "object",
            "description": "Checks that a local variable or a parameter does not shadow a field that is defined in the same class.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks that a local variable or a parameter does not shadow a field that is defined in the same class.",
                    "properties": {
                        "ignoreSetter": {
                            "type": "boolean",
                            "description": "allow setters to shadow field names",
                            "propertyOrder": 1
                        },
                        "ignoreFormat": {
                            "type": "string",
                            "description": "ignore function names matching \"ignoreFormat\" regex",
                            "propertyOrder": 2
                        },
                        "ignoreConstructorParameter": {
                            "type": "boolean",
                            "description": "allow constructor parameters to shadow field names",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 3
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "HiddenField"
                    ],
                    "type": "string",
                    "description": "Checks that a local variable or a parameter does not shadow a field that is defined in the same class."
                }
            },
            "additionalProperties": false
        },
        "FieldDocCommentCheck": {
            "type": "object",
            "description": "Checks code documentation on fields",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks code documentation on fields",
                    "properties": {
                        "requireParams": {
                            "type": "boolean",
                            "description": "ignores requires a `@param` tag for every parameter",
                            "propertyOrder": 3
                        },
                        "fieldType": {
                            "enum": [
                                "VARS",
                                "FUNCTIONS",
                                "BOTH"
                            ],
                            "type": "string",
                            "description": "only check fields of type\n\t\t- VARS = only var fields\n\t\t- FUNCTIONS = only functions;\n\t\t- BOTH = both vars and functions;",
                            "propertyOrder": 1
                        },
                        "requireReturn": {
                            "type": "boolean",
                            "description": "ignores requires a `@return` tag",
                            "propertyOrder": 4
                        },
                        "ignoreOverride": {
                            "type": "boolean",
                            "description": "ignores methods marked with override",
                            "propertyOrder": 5
                        },
                        "tokens": {
                            "items": {
                                "enum": [
                                    "ABSTRACT_DEF",
                                    "CLASS_DEF",
                                    "ENUM_DEF",
                                    "INTERFACE_DEF",
                                    "TYPEDEF_DEF"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "matches only comment docs for types specified in tokens list:\n\t\t- ABSTRACT_DEF = abstract definition \"abstract Test {}\"\n\t\t- CLASS_DEF = class definition \"class Test {}\"\n\t\t- ENUM_DEF = enum definition \"enum Test {}\"\n\t\t- INTERFACE_DEF = interface definition \"interface Test {}\"\n\t\t- TYPEDEF_DEF = typdef definition \"typedef Test = {}\"",
                            "propertyOrder": 0
                        },
                        "modifier": {
                            "enum": [
                                "PUBLIC",
                                "PRIVATE",
                                "BOTH"
                            ],
                            "type": "string",
                            "description": "only check fields matching modifier\n\t\t- PUBLIC = only public fields\n\t\t- PRIVATE = only private fields\n\t\t- BOTH = public and private fields",
                            "propertyOrder": 2
                        },
                        "excludeNames": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "exclude field names from check - default: [\"new\", \"toString\"]",
                            "propertyOrder": 6
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 7
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "FieldDocComment"
                    ],
                    "type": "string",
                    "description": "Checks code documentation on fields"
                }
            },
            "additionalProperties": false
        },
        "InterfaceCheck": {
            "type": "object",
            "description": "Checks and enforces interface style. Either to allow properties and methods or just methods. Has an option to `allowMarkerInterfaces`.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks and enforces interface style. Either to allow properties and methods or just methods. Has an option to `allowMarkerInterfaces`.",
                    "properties": {
                        "allowProperties": {
                            "type": "boolean",
                            "description": "allow properties inside interface types",
                            "propertyOrder": 1
                        },
                        "allowMarkerInterfaces": {
                            "type": "boolean",
                            "description": "allows empty marker interfaces, or forbid their use",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 2
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "Interface"
                    ],
                    "type": "string",
                    "description": "Checks and enforces interface style. Either to allow properties and methods or just methods. Has an option to `allowMarkerInterfaces`."
                }
            },
            "additionalProperties": false
        },
        "AvoidInlineConditionalsCheck": {
            "type": "object",
            "description": "Detects inline conditionals. Useful for developers who find inline conditionals hard to read and want forbid them.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Detects inline conditionals. Useful for developers who find inline conditionals hard to read and want forbid them.",
                    "properties": {
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 0
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "AvoidInlineConditionals"
                    ],
                    "type": "string",
                    "description": "Detects inline conditionals. Useful for developers who find inline conditionals hard to read and want forbid them."
                }
            },
            "additionalProperties": false
        },
        "PublicAccessorCheck": {
            "type": "object",
            "description": "Checks for public accessors.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for public accessors.",
                    "properties": {
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 0
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "PublicAccessor"
                    ],
                    "type": "string",
                    "description": "Checks for public accessors."
                }
            },
            "additionalProperties": false
        },
        "IndentationCheck": {
            "type": "object",
            "description": "Checks correct indentation",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks correct indentation",
                    "properties": {
                        "character": {
                            "enum": [
                                "tab",
                                " ",
                                "  ",
                                "   ",
                                "    ",
                                "     ",
                                "      ",
                                "       ",
                                "        "
                            ],
                            "type": "string",
                            "description": "character sequence to use for indentation\n\t\t- \"tab\" for using tabs\n\t\t- a string containing as many spaces as one indentation level requires",
                            "propertyOrder": 0
                        },
                        "wrapPolicy": {
                            "enum": [
                                "none",
                                "exact",
                                "larger"
                            ],
                            "type": "string",
                            "description": "indentation of wrapped statements (= continued on next line)\n\t\t- none = wrapped statements must have the same indentation as parent\n\t\t- exact = wrapped statemenmts must have a +1 indentation in relation to parent\n\t\t- larger = wrapped statements must have a +1 or larger indentation in relation to parent",
                            "propertyOrder": 4
                        },
                        "ignoreComments": {
                            "type": "boolean",
                            "description": "ignore indentation of comments",
                            "propertyOrder": 3
                        },
                        "ignoreConditionals": {
                            "type": "boolean",
                            "description": "ignore indentation of conditionals (same as setting conditionalPolicy to ignore)",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 5
                        },
                        "conditionalPolicy": {
                            "enum": [
                                "ignore",
                                "fixed_zero",
                                "aligned",
                                "aligned_increase"
                            ],
                            "type": "string",
                            "description": "indentation of conditional statements\n\t\t- ignore = ignores conditioonals, same as \"ignoreConditionals\"\n\t\t- fixed_zero = contitionals have to start at the beginning of a line (only where conditional is the first statement)\n\t\t- aligned = align wih surrounding code\n\t\t- aligned_increase = align wih surrounding code and increase indentation of enclosed code by +1",
                            "propertyOrder": 2
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "Indentation"
                    ],
                    "type": "string",
                    "description": "Checks correct indentation"
                }
            },
            "additionalProperties": false
        },
        "CyclomaticComplexityCheck": {
            "type": "object",
            "description": "Checks the complexity of methods using McCabe simplified cyclomatic complexity check. Complexity levels can be customised using `thresholds` property.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks the complexity of methods using McCabe simplified cyclomatic complexity check. Complexity levels can be customised using `thresholds` property.",
                    "properties": {
                        "thresholds": {
                            "items": {
                                "$ref": "#/definitions/Threshold"
                            },
                            "type": "array",
                            "description": "list of thresholds that define which severity level to report when complexity of method is above its limit",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "CyclomaticComplexity"
                    ],
                    "type": "string",
                    "description": "Checks the complexity of methods using McCabe simplified cyclomatic complexity check. Complexity levels can be customised using `thresholds` property."
                }
            },
            "additionalProperties": false
        },
        "OperatorWrapCheck": {
            "type": "object",
            "description": "Checks line wrapping with operators.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks line wrapping with operators.",
                    "properties": {
                        "tokens": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "list mof wrapping tokens",
                            "propertyOrder": 0
                        },
                        "option": {
                            "enum": [
                                "eol",
                                "nl"
                            ],
                            "type": "string",
                            "description": "policy for wrapping token\n\t\t- eol = wrapping token should be at end of line\n\t\t- nl = wrapping token should start a new line",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 2
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "OperatorWrap"
                    ],
                    "type": "string",
                    "description": "Checks line wrapping with operators."
                }
            },
            "additionalProperties": false
        },
        "MethodNameCheck": {
            "type": "object",
            "description": "Checks that method names conform to a format specified by the `format` property.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks that method names conform to a format specified by the `format` property.",
                    "properties": {
                        "ignoreExtern": {
                            "type": "boolean",
                            "description": "ignores names inside extern types",
                            "propertyOrder": 2
                        },
                        "format": {
                            "type": "string",
                            "description": "regex name format",
                            "propertyOrder": 0
                        },
                        "tokens": {
                            "items": {
                                "enum": [
                                    "PUBLIC",
                                    "PRIVATE",
                                    "STATIC",
                                    "NOTSTATIC",
                                    "INLINE",
                                    "NOTINLINE"
                                ],
                                "type": "string",
                                "description": "check applies to:\n\t- PUBLIC = all public methods\n\t- PRIVATE = all private methods\n\t- STATIC = all static methods\n\t- NOTSTATIC = all non static methods\n\t- INLINE = all inline methods\n\t- NOTINLINE = all non-inline methods"
                            },
                            "type": "array",
                            "description": "list of tokens to limit where names should conform to \"format\"",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 3
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "MethodName"
                    ],
                    "type": "string",
                    "description": "Checks that method names conform to a format specified by the `format` property."
                }
            },
            "additionalProperties": false
        },
        "StringLiteralCheck": {
            "type": "object",
            "description": "Checks for single or double quote string literals.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for single or double quote string literals.",
                    "properties": {
                        "policy": {
                            "enum": [
                                "onlySingle",
                                "onlyDouble",
                                "doubleAndInterpolation"
                            ],
                            "type": "string",
                            "description": "policy for string literal use\n\t\t- onlySingle = enforce single quotes\n\t\t- onlyDouble = enforce double quotes, no interpolation allowed\n\t\t- doubleAndInterpolation = enforce double quotes, allow single quotes for interpolation",
                            "propertyOrder": 0
                        },
                        "allowException": {
                            "type": "boolean",
                            "description": "\"allowException\" allows using single quotes in \"onlyDouble\" and \"doubleAndInterpolation\" mode, when string contains a double quote character.\n\t\tOr double quotes in \"onlySingle\" mode when string contains a single quote character, reducing the need to escape quotation marks.",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 2
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "StringLiteral"
                    ],
                    "type": "string",
                    "description": "Checks for single or double quote string literals."
                }
            },
            "additionalProperties": false
        },
        "ListenerNameCheck": {
            "type": "object",
            "description": "Checks the naming conventions of event listener functions specified using `listeners` property.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks the naming conventions of event listener functions specified using `listeners` property.",
                    "properties": {
                        "listeners": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "list of function names used to register listeners",
                            "propertyOrder": 0
                        },
                        "format": {
                            "type": "string",
                            "description": "regex name format",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 2
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "ListenerName"
                    ],
                    "type": "string",
                    "description": "Checks the naming conventions of event listener functions specified using `listeners` property."
                }
            },
            "additionalProperties": false
        },
        "MemberNameCheck": {
            "type": "object",
            "description": "Checks that instance variable names conform to a format specified by the `format` property.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks that instance variable names conform to a format specified by the `format` property.",
                    "properties": {
                        "ignoreExtern": {
                            "type": "boolean",
                            "description": "ignores names inside extern types",
                            "propertyOrder": 2
                        },
                        "format": {
                            "type": "string",
                            "description": "regex name format",
                            "propertyOrder": 0
                        },
                        "tokens": {
                            "items": {
                                "enum": [
                                    "PUBLIC",
                                    "PRIVATE",
                                    "ENUM",
                                    "CLASS",
                                    "ABSTRACT",
                                    "TYPEDEF"
                                ],
                                "type": "string",
                                "description": "check applies to:\n\t- PUBLIC = all public fields\n\t- PRIVATE = all private fields\n\t- ENUM = all enum fields\n\t- CLASS = all class fields, use in combination with PUBLIC and PRIVATE to only match public/private class fields\n\t- ABSTRACT = all abstract fields, use in combination with PUBLIC and PRIVATE to only match public/private abstract fields\n\t- TYPEDEF = all typedef fields"
                            },
                            "type": "array",
                            "description": "list of tokens to limit where names should conform to \"format\"",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 3
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "MemberName"
                    ],
                    "type": "string",
                    "description": "Checks that instance variable names conform to a format specified by the `format` property."
                }
            },
            "additionalProperties": false
        },
        "Threshold": {
            "type": "object",
            "description": "threshold for code complexity",
            "properties": {
                "complexity": {
                    "type": "integer",
                    "description": "complexity value associated with \"severity\"",
                    "propertyOrder": 1
                },
                "severity": {
                    "enum": [
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "IGNORE"
                    ],
                    "type": "string",
                    "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                    "propertyOrder": 0
                }
            },
            "additionalProperties": false,
            "required": [
                "severity",
                "complexity"
            ]
        },
        "EmptyBlockCheck": {
            "type": "object",
            "description": "Checks for empty blocks. The policy to verify is specified using the property `option`.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for empty blocks. The policy to verify is specified using the property `option`.",
                    "properties": {
                        "tokens": {
                            "items": {
                                "enum": [
                                    "CLASS_DEF",
                                    "ENUM_DEF",
                                    "ABSTRACT_DEF",
                                    "TYPEDEF_DEF",
                                    "INTERFACE_DEF",
                                    "OBJECT_DECL",
                                    "FUNCTION",
                                    "FOR",
                                    "IF",
                                    "WHILE",
                                    "SWITCH",
                                    "TRY",
                                    "CATCH",
                                    "REIFICATION"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "matches only blocks specified in tokens list:\n\t\t- CLASS_DEF = class definition \"class Test {}\"\n\t\t- ENUM_DEF = enum definition \"enum Test {}\"\n\t\t- ABSTRACT_DEF = abstract definition \"abstract Test {}\"\n\t\t- TYPEDEF_DEF = typdef definition \"typedef Test = {}\"\n\t\t- INTERFACE_DEF = interface definition \"interface Test {}\"\n\t\t- OBJECT_DECL = object declaration \"{ x: 0, y: 0, z: 0}\"\n\t\t- FUNCTION = function body \"funnction test () {}\"\n\t\t- FOR = for body \"for (i in 0..10) {}\"\n\t\t- IF = if / else body \"if (test) {} else {}\"\n\t\t- WHILE = while body \"while (test) {}\"\n\t\t- SWITCH = switch / case body \"switch (test) { case: {} default: {} }\"\n\t\t- TRY = try body \"try {}\"\n\t\t- CATCH = catch body \"catch (e:Dynamic) {}\"\n\t\t- REIFICATION = macro reification \"$i{}\"",
                            "propertyOrder": 0
                        },
                        "option": {
                            "enum": [
                                "empty",
                                "text",
                                "stmt"
                            ],
                            "type": "string",
                            "description": "for all empty blocks matched by tokens\n\t    - empty = allow empty blocks but enforce \"{}\" notation\n\t    - text = must contain something apart from whitespace (comment or statement)\n\t    - stmt = must contain at least one statement (that is not a comment)",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 2
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "EmptyBlock"
                    ],
                    "type": "string",
                    "description": "Checks for empty blocks. The policy to verify is specified using the property `option`."
                }
            },
            "additionalProperties": false
        },
        "ArrayAccessCheck": {
            "type": "object",
            "description": "Checks for spaces before array access or inside array elements. Finds code like `a [0], a[ 0]`, etc.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for spaces before array access or inside array elements. Finds code like `a [0], a[ 0]`, etc.",
                    "properties": {
                        "spaceBefore": {
                            "type": "boolean",
                            "description": "set \"spaceBefore\" to false to detect space between array and \"[\"",
                            "propertyOrder": 0
                        },
                        "spaceInside": {
                            "type": "boolean",
                            "description": "set to false to detect space between brackets (\"[\" + \"]\") and index",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 2
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "ArrayAccess"
                    ],
                    "type": "string",
                    "description": "Checks for spaces before array access or inside array elements. Finds code like `a [0], a[ 0]`, etc."
                }
            },
            "additionalProperties": false
        },
        "ReturnCountCheck": {
            "type": "object",
            "description": "Restricts the number of return statements in methods (2 by default). Ignores methods that matches `ignoreFormat` regex property.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Restricts the number of return statements in methods (2 by default). Ignores methods that matches `ignoreFormat` regex property.",
                    "properties": {
                        "ignoreFormat": {
                            "type": "string",
                            "description": "ignore function names matching \"ignoreFormat\" regex",
                            "propertyOrder": 1
                        },
                        "max": {
                            "type": "integer",
                            "description": "maximum number of return calls a function may have",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 2
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "ReturnCount"
                    ],
                    "type": "string",
                    "description": "Restricts the number of return statements in methods (2 by default). Ignores methods that matches `ignoreFormat` regex property."
                }
            },
            "additionalProperties": false
        },
        "DocCommentStyleCheck": {
            "type": "object",
            "description": "Checks code documentation style (/**…**/ vs /*…*/)",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks code documentation style (/**…**/ vs /*…*/)",
                    "properties": {
                        "lineStyle": {
                            "enum": [
                                "ignore",
                                "none",
                                "onestar",
                                "twostars"
                            ],
                            "type": "string",
                            "description": "Defines how each doc comments line should start:\n\t\t- ignore = accepts any line prefix\n\t\t- none =\n\t\t- onestar = *\n\t\t- twostar = **",
                            "propertyOrder": 1
                        },
                        "startStyle": {
                            "enum": [
                                "ignore",
                                "none",
                                "onestar",
                                "twostars"
                            ],
                            "type": "string",
                            "description": "Defines how doc comments should start / end:\n\t\t- ignore = accepts any start / end\n\t\t- onestar = /*\n\t\t- twostar = /**",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 2
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "DocCommentStyle"
                    ],
                    "type": "string",
                    "description": "Checks code documentation style (/**…**/ vs /*…*/)"
                }
            },
            "additionalProperties": false
        },
        "NestedTryDepthCheck": {
            "type": "object",
            "description": "Restricts nested `try` blocks to a specified depth (default = 1).",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Restricts nested `try` blocks to a specified depth (default = 1).",
                    "properties": {
                        "max": {
                            "type": "integer",
                            "description": "maximum number of nested try/catch statemenmts allowed\n\t\tsetting \"max\" to 1 allows one inner try/catch",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "NestedTryDepth"
                    ],
                    "type": "string",
                    "description": "Restricts nested `try` blocks to a specified depth (default = 1)."
                }
            },
            "additionalProperties": false
        },
        "LeftCurlyCheck": {
            "type": "object",
            "description": "Checks for the placement of left curly braces (`{`) for code blocks. The policy to verify is specified using the property `option`.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for the placement of left curly braces (`{`) for code blocks. The policy to verify is specified using the property `option`.",
                    "properties": {
                        "tokens": {
                            "items": {
                                "enum": [
                                    "CLASS_DEF",
                                    "ENUM_DEF",
                                    "ABSTRACT_DEF",
                                    "TYPEDEF_DEF",
                                    "INTERFACE_DEF",
                                    "OBJECT_DECL",
                                    "FUNCTION",
                                    "FOR",
                                    "IF",
                                    "WHILE",
                                    "SWITCH",
                                    "TRY",
                                    "CATCH",
                                    "REIFICATION",
                                    "ARRAY_COMPREHENSION"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "matches only left curlys specified in tokens list:\n\t\t- CLASS_DEF = class definition \"class Test {}\"\n\t\t- ENUM_DEF = enum definition \"enum Test {}\"\n\t\t- ABSTRACT_DEF = abstract definition \"abstract Test {}\"\n\t\t- TYPEDEF_DEF = typdef definition \"typedef Test = {}\"\n\t\t- INTERFACE_DEF = interface definition \"interface Test {}\"\n\t\t- OBJECT_DECL = object declaration \"{ x: 0, y: 0, z: 0}\"\n\t\t- FUNCTION = function body \"funnction test () {}\"\n\t\t- FOR = for body \"for (i in 0..10) {}\"\n\t\t- IF = if / else body \"if (test) {} else {}\"\n\t\t- WHILE = while body \"while (test) {}\"\n\t\t- SWITCH = switch / case body \"switch (test) { case: {} default: {} }\"\n\t\t- TRY = try body \"try {}\"\n\t\t- CATCH = catch body \"catch (e:Dynamic) {}\"\n\t\t- REIFICATION = macro reification \"$i{}\"\n\t\t- ARRAY_COMPREHENSION = array comprehension \"[for (i in 0...10) {i * 2}]\"",
                            "propertyOrder": 0
                        },
                        "ignoreEmptySingleline": {
                            "type": "boolean",
                            "description": "allow single line blocks",
                            "propertyOrder": 2
                        },
                        "option": {
                            "enum": [
                                "eol",
                                "nl",
                                "nlow"
                            ],
                            "type": "string",
                            "description": "placement of left curly\n\t\t- eol = should occur at end of line\n\t    - nl = should occur on a new line\n\t\t- nlow = should occur at end of line unless in wrapped code, then it should occur on a new line",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 3
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "LeftCurly"
                    ],
                    "type": "string",
                    "description": "Checks for the placement of left curly braces (`{`) for code blocks. The policy to verify is specified using the property `option`."
                }
            },
            "additionalProperties": false
        },
        "RedundantAccessMetaCheck": {
            "type": "object",
            "description": "Checks for redundant @:access metadata",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for redundant @:access metadata",
                    "properties": {
                        "prohibitMeta": {
                            "type": "boolean",
                            "description": "switches behaviour of check to\n\t\t- false = look for redundant access modifications\n\t\t- true = to discourage its use everywhere",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "RedundantAccessMeta"
                    ],
                    "type": "string",
                    "description": "Checks for redundant @:access metadata"
                }
            },
            "additionalProperties": false
        },
        "MagicNumberCheck": {
            "type": "object",
            "description": "Checks that there are no magic numbers. By default, -1, 0, 1, and 2 are not considered to be magic numbers.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks that there are no magic numbers. By default, -1, 0, 1, and 2 are not considered to be magic numbers.",
                    "properties": {
                        "ignoreNumbers": {
                            "items": {
                                "type": "number"
                            },
                            "type": "array",
                            "description": "list of magic numbers to ignore during checks",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "MagicNumber"
                    ],
                    "type": "string",
                    "description": "Checks that there are no magic numbers. By default, -1, 0, 1, and 2 are not considered to be magic numbers."
                }
            },
            "additionalProperties": false
        },
        "LocalVariableNameCheck": {
            "type": "object",
            "description": "Checks that the local variable names conform to a format specified by the `format` property.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks that the local variable names conform to a format specified by the `format` property.",
                    "properties": {
                        "ignoreExtern": {
                            "type": "boolean",
                            "description": "ignores names inside extern types",
                            "propertyOrder": 2
                        },
                        "format": {
                            "type": "string",
                            "description": "regex name format",
                            "propertyOrder": 0
                        },
                        "tokens": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "list of tokens to limit where names should conform to \"format\"",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 3
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "LocalVariableName"
                    ],
                    "type": "string",
                    "description": "Checks that the local variable names conform to a format specified by the `format` property."
                }
            },
            "additionalProperties": false
        },
        "IndentationCharacterCheck": {
            "type": "object",
            "description": "Checks indentation character (tab/space, default is tab).",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks indentation character (tab/space, default is tab).",
                    "properties": {
                        "character": {
                            "enum": [
                                "tab",
                                "space"
                            ],
                            "type": "string",
                            "description": "set indentation to\n\t\t- tab = tab\n\t\t- space = space",
                            "propertyOrder": 0
                        },
                        "ignorePattern": {
                            "type": "string",
                            "description": "ignore lines that match regex",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 2
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "IndentationCharacter"
                    ],
                    "type": "string",
                    "description": "Checks indentation character (tab/space, default is tab)."
                }
            },
            "additionalProperties": false
        },
        "MultipleVariableDeclarationsCheck": {
            "type": "object",
            "description": "Checks that each variable declaration is in its own statement and on its own line.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks that each variable declaration is in its own statement and on its own line.",
                    "properties": {
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 0
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "MultipleVariableDeclarations"
                    ],
                    "type": "string",
                    "description": "Checks that each variable declaration is in its own statement and on its own line."
                }
            },
            "additionalProperties": false
        },
        "MultipleStringLiteralsCheck": {
            "type": "object",
            "description": "Checks for multiple occurrences of the same string literal within a single file. Code duplication makes maintenance more difficult, so it's better to replace the multiple occurrences with a constant.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for multiple occurrences of the same string literal within a single file. Code duplication makes maintenance more difficult, so it's better to replace the multiple occurrences with a constant.",
                    "properties": {
                        "minLength": {
                            "type": "integer",
                            "description": "string literals must be \"minLength\" or more characters before including them",
                            "propertyOrder": 1
                        },
                        "ignore": {
                            "type": "string",
                            "description": "ignore string literals matching regex",
                            "propertyOrder": 2
                        },
                        "allowDuplicates": {
                            "type": "integer",
                            "description": "number of occurrences to allow",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 3
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "MultipleStringLiterals"
                    ],
                    "type": "string",
                    "description": "Checks for multiple occurrences of the same string literal within a single file. Code duplication makes maintenance more difficult, so it's better to replace the multiple occurrences with a constant."
                }
            },
            "additionalProperties": false
        },
        "NullableParameterCheck": {
            "type": "object",
            "description": "Enforces a style for nullable parameters.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Enforces a style for nullable parameters.",
                    "properties": {
                        "option": {
                            "enum": [
                                "questionMark",
                                "nullDefault"
                            ],
                            "type": "string",
                            "description": "nullable style to enforece\n\t\t- questionMark = nullable parameters should use \"?name:Type\"\n\t\t- nullDefault = nullable parameters should use \"name:Type = null\"",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "NullableParameter"
                    ],
                    "type": "string",
                    "description": "Enforces a style for nullable parameters."
                }
            },
            "additionalProperties": false
        },
        "OperatorWhitespaceCheck": {
            "type": "object",
            "description": "Checks that whitespace is present or absent around a operators.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks that whitespace is present or absent around a operators.",
                    "properties": {
                        "ternaryOpPolicy": {
                            "enum": [
                                "before",
                                "after",
                                "around",
                                "none",
                                "ignore"
                            ],
                            "type": "string",
                            "description": "policy for \"?:\"\n\t\t- around = enforce whitespace before and after operator\n\t\t- before = enforce whitespace before and no whitespace after operator\n\t\t- after = enforce no whitespace before and whitespace after operator\n\t\t- none = enforce no whitespace before and after operator\n\t\t- ignore = skip checks",
                            "propertyOrder": 2
                        },
                        "unaryOpPolicy": {
                            "enum": [
                                "inner",
                                "none",
                                "ignore"
                            ],
                            "type": "string",
                            "description": "policy for \"++\", \"--\", \"!\", \"~\"\n\t\t- inner = enforce whitespace between unary operator and operand\n\t\t- none = enforce no whitespace between unary operator and operand\n\t\t- ignore = skip checks",
                            "propertyOrder": 1
                        },
                        "boolOpPolicy": {
                            "enum": [
                                "before",
                                "after",
                                "around",
                                "none",
                                "ignore"
                            ],
                            "type": "string",
                            "description": "policy for \"&&\", \"||\"\n\t\t- around = enforce whitespace before and after operator\n\t\t- before = enforce whitespace before and no whitespace after operator\n\t\t- after = enforce no whitespace before and whitespace after operator\n\t\t- none = enforce no whitespace before and after operator\n\t\t- ignore = skip checks",
                            "propertyOrder": 6
                        },
                        "intervalOpPolicy": {
                            "enum": [
                                "before",
                                "after",
                                "around",
                                "none",
                                "ignore"
                            ],
                            "type": "string",
                            "description": "policy for \"...\"\n\t\t- around = enforce whitespace before and after operator\n\t\t- before = enforce whitespace before and no whitespace after operator\n\t\t- after = enforce no whitespace before and whitespace after operator\n\t\t- none = enforce no whitespace before and after operator\n\t\t- ignore = skip checks",
                            "propertyOrder": 7
                        },
                        "assignOpPolicy": {
                            "enum": [
                                "before",
                                "after",
                                "around",
                                "none",
                                "ignore"
                            ],
                            "type": "string",
                            "description": "policy for \"=\", \"+=\", \"-=\", \"*=\", \"/=\", \"<<=\", \">>=\", \">>>=\", \"&=\", \"|=\", \"^=\"\n\t\t- around = enforce whitespace before and after operator\n\t\t- before = enforce whitespace before and no whitespace after operator\n\t\t- after = enforce no whitespace before and whitespace after operator\n\t\t- none = enforce no whitespace before and after operator\n\t\t- ignore = skip checks",
                            "propertyOrder": 0
                        },
                        "functionArgPolicy": {
                            "enum": [
                                "before",
                                "after",
                                "around",
                                "none",
                                "ignore"
                            ],
                            "type": "string",
                            "description": "policy for \"->\"\n\t\t- around = enforce whitespace before and after operator\n\t\t- before = enforce whitespace before and no whitespace after operator\n\t\t- after = enforce no whitespace before and whitespace after operator\n\t\t- none = enforce no whitespace before and after operator\n\t\t- ignore = skip checks",
                            "propertyOrder": 9
                        },
                        "bitwiseOpPolicy": {
                            "enum": [
                                "before",
                                "after",
                                "around",
                                "none",
                                "ignore"
                            ],
                            "type": "string",
                            "description": "policy for \"&\", \"|\", \"^\", \"<<\", \">>\", \">>>\"\n\t\t- around = enforce whitespace before and after operator\n\t\t- before = enforce whitespace before and no whitespace after operator\n\t\t- after = enforce no whitespace before and whitespace after operator\n\t\t- none = enforce no whitespace before and after operator\n\t\t- ignore = skip checks",
                            "propertyOrder": 5
                        },
                        "arithmeticOpPolicy": {
                            "enum": [
                                "before",
                                "after",
                                "around",
                                "none",
                                "ignore"
                            ],
                            "type": "string",
                            "description": "policy for \"+\", \"-\", \"*\", \"/\", \"%\"\n\t\t- around = enforce whitespace before and after operator\n\t\t- before = enforce whitespace before and no whitespace after operator\n\t\t- after = enforce no whitespace before and whitespace after operator\n\t\t- none = enforce no whitespace before and after operator\n\t\t- ignore = skip checks",
                            "propertyOrder": 3
                        },
                        "compareOpPolicy": {
                            "enum": [
                                "before",
                                "after",
                                "around",
                                "none",
                                "ignore"
                            ],
                            "type": "string",
                            "description": "policy for \"==\", \"!=\", \"<\", \"<=\", \">\", \">=\"\n\t\t- around = enforce whitespace before and after operator\n\t\t- before = enforce whitespace before and no whitespace after operator\n\t\t- after = enforce no whitespace before and whitespace after operator\n\t\t- none = enforce no whitespace before and after operator\n\t\t- ignore = skip checks",
                            "propertyOrder": 4
                        },
                        "arrowPolicy": {
                            "enum": [
                                "before",
                                "after",
                                "around",
                                "none",
                                "ignore"
                            ],
                            "type": "string",
                            "description": "policy for \"=>\"\n\t\t- around = enforce whitespace before and after operator\n\t\t- before = enforce whitespace before and no whitespace after operator\n\t\t- after = enforce no whitespace before and whitespace after operator\n\t\t- none = enforce no whitespace before and after operator\n\t\t- ignore = skip checks",
                            "propertyOrder": 8
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 10
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "OperatorWhitespace"
                    ],
                    "type": "string",
                    "description": "Checks that whitespace is present or absent around a operators."
                }
            },
            "additionalProperties": false
        },
        "ExtendedEmptyLinesCheck": {
            "type": "object",
            "description": "Checks for consecutive empty lines.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for consecutive empty lines.",
                    "properties": {
                        "none": {
                            "items": {
                                "enum": [
                                    "beforePackage",
                                    "afterPackage",
                                    "betweenImports",
                                    "beforeUsing",
                                    "afterImports",
                                    "anywhereInFile",
                                    "betweenTypes",
                                    "beforeFileEnd",
                                    "inFunction",
                                    "afterLeftCurly",
                                    "beforeRightCurly",
                                    "typeDefinition",
                                    "beginClass",
                                    "endClass",
                                    "afterClassStaticVars",
                                    "afterClassVars",
                                    "betweenClassStaticVars",
                                    "betweenClassVars",
                                    "betweenClassMethods",
                                    "beginAbstract",
                                    "endAbstract",
                                    "afterAbstractVars",
                                    "betweenAbstractVars",
                                    "betweenAbstractMethods",
                                    "beginInterface",
                                    "endInterface",
                                    "betweenInterfaceFields",
                                    "beginEnum",
                                    "endEnum",
                                    "betweenEnumFields",
                                    "beginTypedef",
                                    "endTypedef",
                                    "betweenTypedefFields",
                                    "afterSingleLineComment",
                                    "afterMultiLineComment"
                                ],
                                "type": "string",
                                "description": "empty line check supports the following places\n\t- afterAbstractVars = after abstract var block\n\t- afterClassStaticVars = after static class var block\n\t- afterClassVars = after class var block\n\t- afterImports = after all imports/usings\n\t- afterLeftCurly = after left curly\n\t- afterMultiLineComment = after multi line comment\n\t- afterPackage = after package\n\t- afterSingleLineComment = after single line comment\n\t- anywhereInFile = anywhere in file\n\t- beforePackage = before package\n\t- beforeRightCurly = before right curly\n\t- beforeUsing = before using block\n\t- beginAbstract = after abstract left curly\n\t- beginClass = after class left curly\n\t- beginEnum = after enum left curly\n\t- beforeFileEnd = before EOF\n\t- beginInterface = after interface left curly\n\t- beginTypedef = after typedef left curly\n\t- betweenAbstractMethods = between abstract methods\n\t- betweenAbstractVars = between abstract vars\n\t- betweenClassMethods = between class methods\n\t- betweenClassStaticVars = between static class vars\n\t- betweenClassVars = between class vars\n\t- betweenEnumFields = between enum fields\n\t- betweenImports = between imports/usings\n\t- betweenInterfaceFields = between interface fields\n\t- betweenTypedefFields = between typedef fields\n\t- betweenTypes = betgween two types\n\t- endClass = before class right curly\n\t- endAbstract = before abstract right curly\n\t- endInterface = before interface right curly\n\t- endEnum = before enum right curly\n\t- endTypedef = before typedef right curly\n\t- inFunction = anywhere inside function body\n\t- typeDefinition = between type and left curly"
                            },
                            "type": "array",
                            "description": "list of places where no empty line is permitted",
                            "propertyOrder": 4
                        },
                        "upto": {
                            "items": {
                                "enum": [
                                    "beforePackage",
                                    "afterPackage",
                                    "betweenImports",
                                    "beforeUsing",
                                    "afterImports",
                                    "anywhereInFile",
                                    "betweenTypes",
                                    "beforeFileEnd",
                                    "inFunction",
                                    "afterLeftCurly",
                                    "beforeRightCurly",
                                    "typeDefinition",
                                    "beginClass",
                                    "endClass",
                                    "afterClassStaticVars",
                                    "afterClassVars",
                                    "betweenClassStaticVars",
                                    "betweenClassVars",
                                    "betweenClassMethods",
                                    "beginAbstract",
                                    "endAbstract",
                                    "afterAbstractVars",
                                    "betweenAbstractVars",
                                    "betweenAbstractMethods",
                                    "beginInterface",
                                    "endInterface",
                                    "betweenInterfaceFields",
                                    "beginEnum",
                                    "endEnum",
                                    "betweenEnumFields",
                                    "beginTypedef",
                                    "endTypedef",
                                    "betweenTypedefFields",
                                    "afterSingleLineComment",
                                    "afterMultiLineComment"
                                ],
                                "type": "string",
                                "description": "empty line check supports the following places\n\t- afterAbstractVars = after abstract var block\n\t- afterClassStaticVars = after static class var block\n\t- afterClassVars = after class var block\n\t- afterImports = after all imports/usings\n\t- afterLeftCurly = after left curly\n\t- afterMultiLineComment = after multi line comment\n\t- afterPackage = after package\n\t- afterSingleLineComment = after single line comment\n\t- anywhereInFile = anywhere in file\n\t- beforePackage = before package\n\t- beforeRightCurly = before right curly\n\t- beforeUsing = before using block\n\t- beginAbstract = after abstract left curly\n\t- beginClass = after class left curly\n\t- beginEnum = after enum left curly\n\t- beforeFileEnd = before EOF\n\t- beginInterface = after interface left curly\n\t- beginTypedef = after typedef left curly\n\t- betweenAbstractMethods = between abstract methods\n\t- betweenAbstractVars = between abstract vars\n\t- betweenClassMethods = between class methods\n\t- betweenClassStaticVars = between static class vars\n\t- betweenClassVars = between class vars\n\t- betweenEnumFields = between enum fields\n\t- betweenImports = between imports/usings\n\t- betweenInterfaceFields = between interface fields\n\t- betweenTypedefFields = between typedef fields\n\t- betweenTypes = betgween two types\n\t- endClass = before class right curly\n\t- endAbstract = before abstract right curly\n\t- endInterface = before interface right curly\n\t- endEnum = before enum right curly\n\t- endTypedef = before typedef right curly\n\t- inFunction = anywhere inside function body\n\t- typeDefinition = between type and left curly"
                            },
                            "type": "array",
                            "description": "list of places where up to \"max\" empty lines are permitted",
                            "propertyOrder": 6
                        },
                        "defaultPolicy": {
                            "enum": [
                                "ignore",
                                "none",
                                "exact",
                                "upto",
                                "atleast"
                            ],
                            "type": "string",
                            "description": "\"defaultPolicy\" applies to all places not in \"ignore\", \"none\", \"exact\", \"upto\" or \"atleast\"",
                            "propertyOrder": 2
                        },
                        "exact": {
                            "items": {
                                "enum": [
                                    "beforePackage",
                                    "afterPackage",
                                    "betweenImports",
                                    "beforeUsing",
                                    "afterImports",
                                    "anywhereInFile",
                                    "betweenTypes",
                                    "beforeFileEnd",
                                    "inFunction",
                                    "afterLeftCurly",
                                    "beforeRightCurly",
                                    "typeDefinition",
                                    "beginClass",
                                    "endClass",
                                    "afterClassStaticVars",
                                    "afterClassVars",
                                    "betweenClassStaticVars",
                                    "betweenClassVars",
                                    "betweenClassMethods",
                                    "beginAbstract",
                                    "endAbstract",
                                    "afterAbstractVars",
                                    "betweenAbstractVars",
                                    "betweenAbstractMethods",
                                    "beginInterface",
                                    "endInterface",
                                    "betweenInterfaceFields",
                                    "beginEnum",
                                    "endEnum",
                                    "betweenEnumFields",
                                    "beginTypedef",
                                    "endTypedef",
                                    "betweenTypedefFields",
                                    "afterSingleLineComment",
                                    "afterMultiLineComment"
                                ],
                                "type": "string",
                                "description": "empty line check supports the following places\n\t- afterAbstractVars = after abstract var block\n\t- afterClassStaticVars = after static class var block\n\t- afterClassVars = after class var block\n\t- afterImports = after all imports/usings\n\t- afterLeftCurly = after left curly\n\t- afterMultiLineComment = after multi line comment\n\t- afterPackage = after package\n\t- afterSingleLineComment = after single line comment\n\t- anywhereInFile = anywhere in file\n\t- beforePackage = before package\n\t- beforeRightCurly = before right curly\n\t- beforeUsing = before using block\n\t- beginAbstract = after abstract left curly\n\t- beginClass = after class left curly\n\t- beginEnum = after enum left curly\n\t- beforeFileEnd = before EOF\n\t- beginInterface = after interface left curly\n\t- beginTypedef = after typedef left curly\n\t- betweenAbstractMethods = between abstract methods\n\t- betweenAbstractVars = between abstract vars\n\t- betweenClassMethods = between class methods\n\t- betweenClassStaticVars = between static class vars\n\t- betweenClassVars = between class vars\n\t- betweenEnumFields = between enum fields\n\t- betweenImports = between imports/usings\n\t- betweenInterfaceFields = between interface fields\n\t- betweenTypedefFields = between typedef fields\n\t- betweenTypes = betgween two types\n\t- endClass = before class right curly\n\t- endAbstract = before abstract right curly\n\t- endInterface = before interface right curly\n\t- endEnum = before enum right curly\n\t- endTypedef = before typedef right curly\n\t- inFunction = anywhere inside function body\n\t- typeDefinition = between type and left curly"
                            },
                            "type": "array",
                            "description": "list of places where exactly \"max\" empty lines are required",
                            "propertyOrder": 5
                        },
                        "max": {
                            "type": "integer",
                            "description": "number of empty lines to allow / enforce (used by \"exact\", \"upto\" and \"atleast\" policies)",
                            "propertyOrder": 0
                        },
                        "ignore": {
                            "items": {
                                "enum": [
                                    "beforePackage",
                                    "afterPackage",
                                    "betweenImports",
                                    "beforeUsing",
                                    "afterImports",
                                    "anywhereInFile",
                                    "betweenTypes",
                                    "beforeFileEnd",
                                    "inFunction",
                                    "afterLeftCurly",
                                    "beforeRightCurly",
                                    "typeDefinition",
                                    "beginClass",
                                    "endClass",
                                    "afterClassStaticVars",
                                    "afterClassVars",
                                    "betweenClassStaticVars",
                                    "betweenClassVars",
                                    "betweenClassMethods",
                                    "beginAbstract",
                                    "endAbstract",
                                    "afterAbstractVars",
                                    "betweenAbstractVars",
                                    "betweenAbstractMethods",
                                    "beginInterface",
                                    "endInterface",
                                    "betweenInterfaceFields",
                                    "beginEnum",
                                    "endEnum",
                                    "betweenEnumFields",
                                    "beginTypedef",
                                    "endTypedef",
                                    "betweenTypedefFields",
                                    "afterSingleLineComment",
                                    "afterMultiLineComment"
                                ],
                                "type": "string",
                                "description": "empty line check supports the following places\n\t- afterAbstractVars = after abstract var block\n\t- afterClassStaticVars = after static class var block\n\t- afterClassVars = after class var block\n\t- afterImports = after all imports/usings\n\t- afterLeftCurly = after left curly\n\t- afterMultiLineComment = after multi line comment\n\t- afterPackage = after package\n\t- afterSingleLineComment = after single line comment\n\t- anywhereInFile = anywhere in file\n\t- beforePackage = before package\n\t- beforeRightCurly = before right curly\n\t- beforeUsing = before using block\n\t- beginAbstract = after abstract left curly\n\t- beginClass = after class left curly\n\t- beginEnum = after enum left curly\n\t- beforeFileEnd = before EOF\n\t- beginInterface = after interface left curly\n\t- beginTypedef = after typedef left curly\n\t- betweenAbstractMethods = between abstract methods\n\t- betweenAbstractVars = between abstract vars\n\t- betweenClassMethods = between class methods\n\t- betweenClassStaticVars = between static class vars\n\t- betweenClassVars = between class vars\n\t- betweenEnumFields = between enum fields\n\t- betweenImports = between imports/usings\n\t- betweenInterfaceFields = between interface fields\n\t- betweenTypedefFields = between typedef fields\n\t- betweenTypes = betgween two types\n\t- endClass = before class right curly\n\t- endAbstract = before abstract right curly\n\t- endInterface = before interface right curly\n\t- endEnum = before enum right curly\n\t- endTypedef = before typedef right curly\n\t- inFunction = anywhere inside function body\n\t- typeDefinition = between type and left curly"
                            },
                            "type": "array",
                            "description": "list of places to ignore",
                            "propertyOrder": 3
                        },
                        "atleast": {
                            "items": {
                                "enum": [
                                    "beforePackage",
                                    "afterPackage",
                                    "betweenImports",
                                    "beforeUsing",
                                    "afterImports",
                                    "anywhereInFile",
                                    "betweenTypes",
                                    "beforeFileEnd",
                                    "inFunction",
                                    "afterLeftCurly",
                                    "beforeRightCurly",
                                    "typeDefinition",
                                    "beginClass",
                                    "endClass",
                                    "afterClassStaticVars",
                                    "afterClassVars",
                                    "betweenClassStaticVars",
                                    "betweenClassVars",
                                    "betweenClassMethods",
                                    "beginAbstract",
                                    "endAbstract",
                                    "afterAbstractVars",
                                    "betweenAbstractVars",
                                    "betweenAbstractMethods",
                                    "beginInterface",
                                    "endInterface",
                                    "betweenInterfaceFields",
                                    "beginEnum",
                                    "endEnum",
                                    "betweenEnumFields",
                                    "beginTypedef",
                                    "endTypedef",
                                    "betweenTypedefFields",
                                    "afterSingleLineComment",
                                    "afterMultiLineComment"
                                ],
                                "type": "string",
                                "description": "empty line check supports the following places\n\t- afterAbstractVars = after abstract var block\n\t- afterClassStaticVars = after static class var block\n\t- afterClassVars = after class var block\n\t- afterImports = after all imports/usings\n\t- afterLeftCurly = after left curly\n\t- afterMultiLineComment = after multi line comment\n\t- afterPackage = after package\n\t- afterSingleLineComment = after single line comment\n\t- anywhereInFile = anywhere in file\n\t- beforePackage = before package\n\t- beforeRightCurly = before right curly\n\t- beforeUsing = before using block\n\t- beginAbstract = after abstract left curly\n\t- beginClass = after class left curly\n\t- beginEnum = after enum left curly\n\t- beforeFileEnd = before EOF\n\t- beginInterface = after interface left curly\n\t- beginTypedef = after typedef left curly\n\t- betweenAbstractMethods = between abstract methods\n\t- betweenAbstractVars = between abstract vars\n\t- betweenClassMethods = between class methods\n\t- betweenClassStaticVars = between static class vars\n\t- betweenClassVars = between class vars\n\t- betweenEnumFields = between enum fields\n\t- betweenImports = between imports/usings\n\t- betweenInterfaceFields = between interface fields\n\t- betweenTypedefFields = between typedef fields\n\t- betweenTypes = betgween two types\n\t- endClass = before class right curly\n\t- endAbstract = before abstract right curly\n\t- endInterface = before interface right curly\n\t- endEnum = before enum right curly\n\t- endTypedef = before typedef right curly\n\t- inFunction = anywhere inside function body\n\t- typeDefinition = between type and left curly"
                            },
                            "type": "array",
                            "description": "list of places where at least \"max\" empty lines are required",
                            "propertyOrder": 7
                        },
                        "skipSingleLineTypes": {
                            "type": "boolean",
                            "description": "skips single line type definitions",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 8
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "ExtendedEmptyLines"
                    ],
                    "type": "string",
                    "description": "Checks for consecutive empty lines."
                }
            },
            "additionalProperties": false
        },
        "Config": {
            "type": "object",
            "properties": {
                "extendsConfigPath": {
                    "type": "string",
                    "description": "Extend configuration from a master configuration file.\n\t\tChecks and excludes from both master and current configuration file form the final runtime configuration.\n\t\tThere is no shadowing or overwriting checks or excludes, Checkstyle runs every check regardless where it comes from.\n\t\tA master configuration file can have its own \"extendsConfigPath\" entry. Checkstyle will walk up the chain as long as it does not cycle.",
                    "propertyOrder": 0
                },
                "defineCombinations": {
                    "items": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": "array",
                    "description": "different define combinations to use (on top of \"baseDefines\")",
                    "propertyOrder": 3
                },
                "defaultSeverity": {
                    "enum": [
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "IGNORE"
                    ],
                    "type": "string",
                    "description": "Each check has a builtin severity level.\n\t\tSetting \"defaultSeverity\" applies its value to all checks that have no explicity \"severity\" field in their configuration\n\n\t\t@see checkstyle.SeverityLevel",
                    "propertyOrder": 1
                },
                "baseDefines": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "defines that are always added",
                    "propertyOrder": 2
                },
                "version": {
                    "minimum": 1,
                    "type": "integer",
                    "maximum": 1,
                    "description": "version number",
                    "propertyOrder": 7
                },
                "exclude": {
                    "propertyOrder": 6,
                    "$ref": "#/definitions/ExcludeConfig"
                },
                "checks": {
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/AnonymousCheck"
                            },
                            {
                                "$ref": "#/definitions/ArrayAccessCheck"
                            },
                            {
                                "$ref": "#/definitions/ArrayLiteralCheck"
                            },
                            {
                                "$ref": "#/definitions/AvoidInlineConditionalsCheck"
                            },
                            {
                                "$ref": "#/definitions/AvoidStarImportCheck"
                            },
                            {
                                "$ref": "#/definitions/CatchParameterNameCheck"
                            },
                            {
                                "$ref": "#/definitions/ConditionalCompilationCheck"
                            },
                            {
                                "$ref": "#/definitions/ConstantNameCheck"
                            },
                            {
                                "$ref": "#/definitions/CyclomaticComplexityCheck"
                            },
                            {
                                "$ref": "#/definitions/DefaultComesLastCheck"
                            },
                            {
                                "$ref": "#/definitions/DocCommentStyleCheck"
                            },
                            {
                                "$ref": "#/definitions/DynamicCheck"
                            },
                            {
                                "$ref": "#/definitions/ERegLiteralCheck"
                            },
                            {
                                "$ref": "#/definitions/EmptyBlockCheck"
                            },
                            {
                                "$ref": "#/definitions/EmptyLinesCheck"
                            },
                            {
                                "$ref": "#/definitions/EmptyPackageCheck"
                            },
                            {
                                "$ref": "#/definitions/ExtendedEmptyLinesCheck"
                            },
                            {
                                "$ref": "#/definitions/FieldDocCommentCheck"
                            },
                            {
                                "$ref": "#/definitions/FileLengthCheck"
                            },
                            {
                                "$ref": "#/definitions/HexadecimalLiteralCheck"
                            },
                            {
                                "$ref": "#/definitions/HiddenFieldCheck"
                            },
                            {
                                "$ref": "#/definitions/IndentationCheck"
                            },
                            {
                                "$ref": "#/definitions/IndentationCharacterCheck"
                            },
                            {
                                "$ref": "#/definitions/InnerAssignmentCheck"
                            },
                            {
                                "$ref": "#/definitions/InterfaceCheck"
                            },
                            {
                                "$ref": "#/definitions/LeftCurlyCheck"
                            },
                            {
                                "$ref": "#/definitions/LineLengthCheck"
                            },
                            {
                                "$ref": "#/definitions/ListenerNameCheck"
                            },
                            {
                                "$ref": "#/definitions/LocalVariableNameCheck"
                            },
                            {
                                "$ref": "#/definitions/MagicNumberCheck"
                            },
                            {
                                "$ref": "#/definitions/MemberNameCheck"
                            },
                            {
                                "$ref": "#/definitions/MethodCountCheck"
                            },
                            {
                                "$ref": "#/definitions/MethodLengthCheck"
                            },
                            {
                                "$ref": "#/definitions/MethodNameCheck"
                            },
                            {
                                "$ref": "#/definitions/ModifierOrderCheck"
                            },
                            {
                                "$ref": "#/definitions/MultipleStringLiteralsCheck"
                            },
                            {
                                "$ref": "#/definitions/MultipleVariableDeclarationsCheck"
                            },
                            {
                                "$ref": "#/definitions/NeedBracesCheck"
                            },
                            {
                                "$ref": "#/definitions/NestedForDepthCheck"
                            },
                            {
                                "$ref": "#/definitions/NestedIfDepthCheck"
                            },
                            {
                                "$ref": "#/definitions/NestedTryDepthCheck"
                            },
                            {
                                "$ref": "#/definitions/NullableParameterCheck"
                            },
                            {
                                "$ref": "#/definitions/OperatorWhitespaceCheck"
                            },
                            {
                                "$ref": "#/definitions/OperatorWrapCheck"
                            },
                            {
                                "$ref": "#/definitions/ParameterNameCheck"
                            },
                            {
                                "$ref": "#/definitions/ParameterNumberCheck"
                            },
                            {
                                "$ref": "#/definitions/PublicAccessorCheck"
                            },
                            {
                                "$ref": "#/definitions/RedundantAccessMetaCheck"
                            },
                            {
                                "$ref": "#/definitions/RedundantAllowMetaCheck"
                            },
                            {
                                "$ref": "#/definitions/RedundantModifierCheck"
                            },
                            {
                                "$ref": "#/definitions/ReturnCheck"
                            },
                            {
                                "$ref": "#/definitions/ReturnCountCheck"
                            },
                            {
                                "$ref": "#/definitions/RightCurlyCheck"
                            },
                            {
                                "$ref": "#/definitions/SeparatorWhitespaceCheck"
                            },
                            {
                                "$ref": "#/definitions/SeparatorWrapCheck"
                            },
                            {
                                "$ref": "#/definitions/SimplifyBooleanExpressionCheck"
                            },
                            {
                                "$ref": "#/definitions/SimplifyBooleanReturnCheck"
                            },
                            {
                                "$ref": "#/definitions/SpacingCheck"
                            },
                            {
                                "$ref": "#/definitions/StringLiteralCheck"
                            },
                            {
                                "$ref": "#/definitions/TODOCommentCheck"
                            },
                            {
                                "$ref": "#/definitions/TabForAligningCheck"
                            },
                            {
                                "$ref": "#/definitions/TraceCheck"
                            },
                            {
                                "$ref": "#/definitions/TrailingWhitespaceCheck"
                            },
                            {
                                "$ref": "#/definitions/TypeCheck"
                            },
                            {
                                "$ref": "#/definitions/TypeDocCommentCheck"
                            },
                            {
                                "$ref": "#/definitions/TypeNameCheck"
                            },
                            {
                                "$ref": "#/definitions/UnnecessaryConstructorCheck"
                            },
                            {
                                "$ref": "#/definitions/UnusedImportCheck"
                            },
                            {
                                "$ref": "#/definitions/UnusedLocalVarCheck"
                            },
                            {
                                "$ref": "#/definitions/VariableInitialisationCheck"
                            },
                            {
                                "$ref": "#/definitions/WhitespaceAfterCheck"
                            },
                            {
                                "$ref": "#/definitions/WhitespaceAroundCheck"
                            }
                        ]
                    },
                    "type": "array",
                    "propertyOrder": 5
                },
                "numberOfCheckerThreads": {
                    "minimum": 1,
                    "type": "integer",
                    "maximum": 15,
                    "description": "Sets the number of checker threads, valid range is 1-15",
                    "propertyOrder": 4
                }
            },
            "additionalProperties": false
        },
        "SpacingCheck": {
            "type": "object",
            "description": "Spacing check on if, for, while, switch, try statements and around operators.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Spacing check on if, for, while, switch, try statements and around operators.",
                    "properties": {
                        "spaceIfCondition": {
                            "enum": [
                                "should",
                                "should_not",
                                "any"
                            ],
                            "type": "string",
                            "description": "policy for if statements (space between \"if\" and \"(\")\n\t\t- should = require space between statement and condition\n\t\t- shouldNot = no space should between statement and condition\n\t\t- any = ignored by space check",
                            "propertyOrder": 2
                        },
                        "spaceAroundBinop": {
                            "type": "boolean",
                            "description": "require space around Binop operators (\"+\", \"-\", \"/\", etc.)",
                            "propertyOrder": 0
                        },
                        "spaceForLoop": {
                            "enum": [
                                "should",
                                "should_not",
                                "any"
                            ],
                            "type": "string",
                            "description": "policy for for statements (space between \"for\" and \"(\")\n\t\t- should = require space between statement and condition\n\t\t- shouldNot = no space should between statement and condition\n\t\t- any = ignored by space check",
                            "propertyOrder": 3
                        },
                        "ignoreRangeOperator": {
                            "type": "boolean",
                            "description": "exclude range operator \"...\" from \"spaceAroundBinop\"",
                            "propertyOrder": 7
                        },
                        "spaceWhileLoop": {
                            "enum": [
                                "should",
                                "should_not",
                                "any"
                            ],
                            "type": "string",
                            "description": "policy for while statements (space between while\" and \"(\")\n\t\t- should = require space between statement and condition\n\t\t- shouldNot = no space should between statement and condition\n\t\t- any = ignored by space check",
                            "propertyOrder": 4
                        },
                        "spaceCatch": {
                            "enum": [
                                "should",
                                "should_not",
                                "any"
                            ],
                            "type": "string",
                            "description": "policy for catch statements (space between \"catch\" and \"(\")\n\t\t- should = require space between statement and condition\n\t\t- shouldNot = no space should between statement and condition\n\t\t- any = ignored by space check",
                            "propertyOrder": 6
                        },
                        "spaceSwitchCase": {
                            "enum": [
                                "should",
                                "should_not",
                                "any"
                            ],
                            "type": "string",
                            "description": "policy for switch statements (space between \"switch\" and \"(\")\n\t\t- should = require space between statement and condition\n\t\t- shouldNot = no space should between statement and condition\n\t\t- any = ignored by space check",
                            "propertyOrder": 5
                        },
                        "noSpaceAroundUnop": {
                            "type": "boolean",
                            "description": "enforce no space around Unop operators (\"++\", \"--\", \"!\", \"-\", \"~\")",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 8
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "Spacing"
                    ],
                    "type": "string",
                    "description": "Spacing check on if, for, while, switch, try statements and around operators."
                }
            },
            "additionalProperties": false
        },
        "AvoidStarImportCheck": {
            "type": "object",
            "description": "Checks for import statements that use the * notation and using directives.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for import statements that use the * notation and using directives.",
                    "properties": {
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 0
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "AvoidStarImport"
                    ],
                    "type": "string",
                    "description": "Checks for import statements that use the * notation and using directives."
                }
            },
            "additionalProperties": false
        },
        "TrailingWhitespaceCheck": {
            "type": "object",
            "description": "Checks if there are any trailing white spaces.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks if there are any trailing white spaces.",
                    "properties": {
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 0
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "TrailingWhitespace"
                    ],
                    "type": "string",
                    "description": "Checks if there are any trailing white spaces."
                }
            },
            "additionalProperties": false
        },
        "FileLengthCheck": {
            "type": "object",
            "description": "Checks for long source files. If a source file becomes very long it is hard to understand. Therefore long classes should usually be refactored into several individual classes that focus on a specific task.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for long source files. If a source file becomes very long it is hard to understand. Therefore long classes should usually be refactored into several individual classes that focus on a specific task.",
                    "properties": {
                        "max": {
                            "type": "integer",
                            "description": "maximum number of lines permitted per file (default: 2000)",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "FileLength"
                    ],
                    "type": "string",
                    "description": "Checks for long source files. If a source file becomes very long it is hard to understand. Therefore long classes should usually be refactored into several individual classes that focus on a specific task."
                }
            },
            "additionalProperties": false
        },
        "NestedIfDepthCheck": {
            "type": "object",
            "description": "Restricts nested `if-else` blocks to a specified depth (default = 1).",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Restricts nested `if-else` blocks to a specified depth (default = 1).",
                    "properties": {
                        "max": {
                            "type": "integer",
                            "description": "maximum number of nested if statements allowed\n\t\tsetting \"max\" to 1 allows one if inside another",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "NestedIfDepth"
                    ],
                    "type": "string",
                    "description": "Restricts nested `if-else` blocks to a specified depth (default = 1)."
                }
            },
            "additionalProperties": false
        },
        "TODOCommentCheck": {
            "type": "object",
            "description": "A check for TODO/FIXME/HACK/XXX/BUG comments. The format can be customised by changing `format` property.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "A check for TODO/FIXME/HACK/XXX/BUG comments. The format can be customised by changing `format` property.",
                    "properties": {
                        "format": {
                            "type": "string",
                            "description": "regex todo comment format, defaults to \"^\\\\s*(TODO|FIXME|HACK|XXX|BUG)\"",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "TODOComment"
                    ],
                    "type": "string",
                    "description": "A check for TODO/FIXME/HACK/XXX/BUG comments. The format can be customised by changing `format` property."
                }
            },
            "additionalProperties": false
        },
        "EmptyPackageCheck": {
            "type": "object",
            "description": "Checks for empty package names.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for empty package names.",
                    "properties": {
                        "enforceEmptyPackage": {
                            "type": "boolean",
                            "description": "enforce using a package declaration, even if it is empty",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "EmptyPackage"
                    ],
                    "type": "string",
                    "description": "Checks for empty package names."
                }
            },
            "additionalProperties": false
        },
        "ConstantNameCheck": {
            "type": "object",
            "description": "Checks that the constants (static / static inline with initialisation) conform to a format specified by the `format` property.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks that the constants (static / static inline with initialisation) conform to a format specified by the `format` property.",
                    "properties": {
                        "ignoreExtern": {
                            "type": "boolean",
                            "description": "ignores names inside extern types",
                            "propertyOrder": 2
                        },
                        "format": {
                            "type": "string",
                            "description": "regex name format",
                            "propertyOrder": 0
                        },
                        "tokens": {
                            "items": {
                                "enum": [
                                    "INLINE",
                                    "NOTINLINE"
                                ],
                                "type": "string",
                                "description": "supports inline and non inline constants\n\t- INLINE = \"static inline var\"\n\t- NOTINLINE = \"static var\""
                            },
                            "type": "array",
                            "description": "list of tokens to limit where names should conform to \"format\"",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 3
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "ConstantName"
                    ],
                    "type": "string",
                    "description": "Checks that the constants (static / static inline with initialisation) conform to a format specified by the `format` property."
                }
            },
            "additionalProperties": false
        },
        "ParameterNumberCheck": {
            "type": "object",
            "description": "Checks the number of parameters of a method.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks the number of parameters of a method.",
                    "properties": {
                        "max": {
                            "type": "integer",
                            "description": "maximum number of parameters per method (default: 7)",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 2
                        },
                        "ignoreOverriddenMethods": {
                            "type": "boolean",
                            "description": "ignore methods with \"override\", only base class violates",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "ParameterNumber"
                    ],
                    "type": "string",
                    "description": "Checks the number of parameters of a method."
                }
            },
            "additionalProperties": false
        },
        "ArrayLiteralCheck": {
            "type": "object",
            "description": "Checks if the array is instantiated using [] which is shorter and cleaner, not with new.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks if the array is instantiated using [] which is shorter and cleaner, not with new.",
                    "properties": {
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 0
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "ArrayLiteral"
                    ],
                    "type": "string",
                    "description": "Checks if the array is instantiated using [] which is shorter and cleaner, not with new."
                }
            },
            "additionalProperties": false
        },
        "TraceCheck": {
            "type": "object",
            "description": "Checks for trace calls in code.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for trace calls in code.",
                    "properties": {
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 0
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "Trace"
                    ],
                    "type": "string",
                    "description": "Checks for trace calls in code."
                }
            },
            "additionalProperties": false
        },
        "UnusedLocalVarCheck": {
            "type": "object",
            "description": "Checks for unused local variables.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for unused local variables.",
                    "properties": {
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 0
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "UnusedLocalVar"
                    ],
                    "type": "string",
                    "description": "Checks for unused local variables."
                }
            },
            "additionalProperties": false
        },
        "NeedBracesCheck": {
            "type": "object",
            "description": "Checks for braces on function, if, for and while statements. It has an option to allow single line statements without braces using property `allowSingleLineStatement` like `if (b) return 10;`.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for braces on function, if, for and while statements. It has an option to allow single line statements without braces using property `allowSingleLineStatement` like `if (b) return 10;`.",
                    "properties": {
                        "allowSingleLineStatement": {
                            "type": "boolean",
                            "description": "allow / disallow use of single line statements without braces",
                            "propertyOrder": 1
                        },
                        "tokens": {
                            "items": {
                                "enum": [
                                    "FUNCTION",
                                    "FOR",
                                    "IF",
                                    "ELSE_IF",
                                    "WHILE",
                                    "DO_WHILE",
                                    "CATCH"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "matches only statements specified in tokens list:\n\n\t\t- FUNCTION = function body \"funnction test () {}\"\n\t\t- FOR = for body \"for (i in 0..10) {}\"\n\t\t- IF = if body \"if (test) {} else {}\"\n\t\t- ELSE_IF = if body \"if (test) {} else if {}\"\n\t\t- WHILE = while body \"while (test) {}\"\n\t\t- DO_WHILE = do…while body \"do {} while (test)\"\n\t\t- CATCH = catch body \"catch (e:Dynamic) {}\"",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 2
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "NeedBraces"
                    ],
                    "type": "string",
                    "description": "Checks for braces on function, if, for and while statements. It has an option to allow single line statements without braces using property `allowSingleLineStatement` like `if (b) return 10;`."
                }
            },
            "additionalProperties": false
        },
        "LineLengthCheck": {
            "type": "object",
            "description": "Checks for long lines. Long lines are hard to read.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for long lines. Long lines are hard to read.",
                    "properties": {
                        "max": {
                            "type": "integer",
                            "description": "maximum number of characters per line (default: 160)",
                            "propertyOrder": 0
                        },
                        "ignorePattern": {
                            "type": "string",
                            "description": "ignore lines matching regex",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 2
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "LineLength"
                    ],
                    "type": "string",
                    "description": "Checks for long lines. Long lines are hard to read."
                }
            },
            "additionalProperties": false
        },
        "WhitespaceAroundCheck": {
            "type": "object",
            "description": "Checks that a token is surrounded by whitespace.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks that a token is surrounded by whitespace.",
                    "properties": {
                        "tokens": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "supported list of tokens:\n\t\t\",\", \";\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", \":\", \".\", \"=\", \"+\", \"-\", \"*\", \"/\", \"%\", \">\", \"<\", \">=\", \"<=\", \"==\", \"!=\",\n\t\t\"&\", \"|\", \"^\", \"&&\", \"||\", \"<<\", \">>\", \">>>\", \"+=\", \"-=\", \"*=\", \"/=\", \"%=\", \"<<=\", \">>=\", \">>>=\", \"|=\", \"&=\",\n\t\t\"^=\", \"...\", \"=>\", \"!\", \"++\", \"--\",",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "WhitespaceAround"
                    ],
                    "type": "string",
                    "description": "Checks that a token is surrounded by whitespace."
                }
            },
            "additionalProperties": false
        },
        "MethodLengthCheck": {
            "type": "object",
            "description": "Checks for long methods. If a method becomes very long it is hard to understand. Therefore long methods should usually be refactored into several individual methods that focus on a specific task.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for long methods. If a method becomes very long it is hard to understand. Therefore long methods should usually be refactored into several individual methods that focus on a specific task.",
                    "properties": {
                        "max": {
                            "type": "integer",
                            "description": "maximum number of lines per method (default: 50)",
                            "propertyOrder": 0
                        },
                        "countEmpty": {
                            "type": "boolean",
                            "description": "maximum includes empty lines / should ignore empty lines",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 2
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "MethodLength"
                    ],
                    "type": "string",
                    "description": "Checks for long methods. If a method becomes very long it is hard to understand. Therefore long methods should usually be refactored into several individual methods that focus on a specific task."
                }
            },
            "additionalProperties": false
        },
        "SeparatorWhitespaceCheck": {
            "type": "object",
            "description": "Checks that whitespace is present or absent around a separators.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks that whitespace is present or absent around a separators.",
                    "properties": {
                        "commaPolicy": {
                            "enum": [
                                "before",
                                "after",
                                "around",
                                "none",
                                "ignore"
                            ],
                            "type": "string",
                            "description": "policy for \",\"\n\t\t- around = enforce whitespace before and after operator\n\t\t- before = enforce whitespace before and no whitespace after operator\n\t\t- after = enforce no whitespace before and whitespace after operator\n\t\t- none = enforce no whitespace before and after operator\n\t\t- ignore = skip checks",
                            "propertyOrder": 1
                        },
                        "semicolonPolicy": {
                            "enum": [
                                "before",
                                "after",
                                "around",
                                "none",
                                "ignore"
                            ],
                            "type": "string",
                            "description": "policy for \";\"\n\t\t- around = enforce whitespace before and after operator\n\t\t- before = enforce whitespace before and no whitespace after operator\n\t\t- after = enforce no whitespace before and whitespace after operator\n\t\t- none = enforce no whitespace before and after operator\n\t\t- ignore = skip checks",
                            "propertyOrder": 2
                        },
                        "dotPolicy": {
                            "enum": [
                                "before",
                                "after",
                                "around",
                                "none",
                                "ignore"
                            ],
                            "type": "string",
                            "description": "policy for \".\"\n\t\t- around = enforce whitespace before and after operator\n\t\t- before = enforce whitespace before and no whitespace after operator\n\t\t- after = enforce no whitespace before and whitespace after operator\n\t\t- none = enforce no whitespace before and after operator\n\t\t- ignore = skip checks",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 3
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "SeparatorWhitespace"
                    ],
                    "type": "string",
                    "description": "Checks that whitespace is present or absent around a separators."
                }
            },
            "additionalProperties": false
        },
        "ParameterNameCheck": {
            "type": "object",
            "description": "Checks that parameter names conform to a format specified by the `format` property.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks that parameter names conform to a format specified by the `format` property.",
                    "properties": {
                        "ignoreExtern": {
                            "type": "boolean",
                            "description": "ignores names inside extern types",
                            "propertyOrder": 2
                        },
                        "format": {
                            "type": "string",
                            "description": "regex name format",
                            "propertyOrder": 0
                        },
                        "tokens": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "list of tokens to limit where names should conform to \"format\"",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 3
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "ParameterName"
                    ],
                    "type": "string",
                    "description": "Checks that parameter names conform to a format specified by the `format` property."
                }
            },
            "additionalProperties": false
        },
        "UnnecessaryConstructorCheck": {
            "type": "object",
            "description": "Checks for unnecessary constructor in classes that contain only static methods or fields.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for unnecessary constructor in classes that contain only static methods or fields.",
                    "properties": {
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 0
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "UnnecessaryConstructor"
                    ],
                    "type": "string",
                    "description": "Checks for unnecessary constructor in classes that contain only static methods or fields."
                }
            },
            "additionalProperties": false
        },
        "RedundantModifierCheck": {
            "type": "object",
            "description": "Checks for redundant modifiers.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for redundant modifiers.",
                    "properties": {
                        "enforcePrivate": {
                            "type": "boolean",
                            "description": "enforce use of \"private\" modifiers",
                            "propertyOrder": 2
                        },
                        "enforcePublic": {
                            "type": "boolean",
                            "description": "enforce use of \"public\" modifiers",
                            "propertyOrder": 1
                        },
                        "enforcePublicPrivate": {
                            "type": "boolean",
                            "description": "enforce use of \"public\" and \"private\" modifiers\n\t\timplies enforcePublic and enforcePrivate",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 3
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "RedundantModifier"
                    ],
                    "type": "string",
                    "description": "Checks for redundant modifiers."
                }
            },
            "additionalProperties": false
        },
        "DefaultComesLastCheck": {
            "type": "object",
            "description": "Check that the `default` is after all the cases in a `switch` statement. Haxe allows `default` anywhere within the `switch` statement. But it is more readable if it comes after the last `case`.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Check that the `default` is after all the cases in a `switch` statement. Haxe allows `default` anywhere within the `switch` statement. But it is more readable if it comes after the last `case`.",
                    "properties": {
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 0
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "DefaultComesLast"
                    ],
                    "type": "string",
                    "description": "Check that the `default` is after all the cases in a `switch` statement. Haxe allows `default` anywhere within the `switch` statement. But it is more readable if it comes after the last `case`."
                }
            },
            "additionalProperties": false
        },
        "TypeNameCheck": {
            "type": "object",
            "description": "Checks that type names conform to a format specified by the `format` property.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks that type names conform to a format specified by the `format` property.",
                    "properties": {
                        "ignoreExtern": {
                            "type": "boolean",
                            "description": "ignores names inside extern types",
                            "propertyOrder": 2
                        },
                        "format": {
                            "type": "string",
                            "description": "regex name format",
                            "propertyOrder": 0
                        },
                        "tokens": {
                            "items": {
                                "enum": [
                                    "INTERFACE",
                                    "CLASS",
                                    "ENUM",
                                    "ABSTRACT",
                                    "TYPEDEF"
                                ],
                                "type": "string",
                                "description": "check applies to:\n\t- INTERFACE = all interface types\n\t- CLASS = all class types\n\t- ENUM = all enum types\n\t- ABSTRACT = all abstract types\n\t- TYPEDEF = all typedef types"
                            },
                            "type": "array",
                            "description": "list of tokens to limit where names should conform to \"format\"",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 3
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "TypeName"
                    ],
                    "type": "string",
                    "description": "Checks that type names conform to a format specified by the `format` property."
                }
            },
            "additionalProperties": false
        },
        "SimplifyBooleanExpressionCheck": {
            "type": "object",
            "description": "Checks for over-complicated boolean expressions. Finds code like `if (b == true), b || true, !false`, etc.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for over-complicated boolean expressions. Finds code like `if (b == true), b || true, !false`, etc.",
                    "properties": {
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 0
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "SimplifyBooleanExpression"
                    ],
                    "type": "string",
                    "description": "Checks for over-complicated boolean expressions. Finds code like `if (b == true), b || true, !false`, etc."
                }
            },
            "additionalProperties": false
        },
        "ExcludeFilterList": {
            "items": {
                "type": "string"
            },
            "type": "array",
            "description": "list of path filters, e.g.\n\t- full type names\n\t- names of individual folder or subfolders\n\t- partial folder or type names\n\n\teach line can have an additional range specification:\n\t- \":<linenumber>\" = only matches a specific line number - valid line number start at 1\n\t- \":<start>-<end>\" = matches line numbers from <start> to <end> (including both)\n\t- \":<identifier>\" = matches any line or block that has <identifier> name (Haxe keywords currently unsupported)"
        },
        "MethodCountCheck": {
            "type": "object",
            "description": "Checks the number of methods declared in each type. This includes the number of each scope (`private` and `public`) as well as an overall total.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks the number of methods declared in each type. This includes the number of each scope (`private` and `public`) as well as an overall total.",
                    "properties": {
                        "maxPrivate": {
                            "type": "integer",
                            "description": "maximum number of private functions permitted per file (default: 100)",
                            "propertyOrder": 1
                        },
                        "maxPublic": {
                            "type": "integer",
                            "description": "maximum number of public functions permitted per file (default: 100)",
                            "propertyOrder": 2
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 3
                        },
                        "maxTotal": {
                            "type": "integer",
                            "description": "maximum number of functions permitted per file (default: 100)",
                            "propertyOrder": 0
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "MethodCount"
                    ],
                    "type": "string",
                    "description": "Checks the number of methods declared in each type. This includes the number of each scope (`private` and `public`) as well as an overall total."
                }
            },
            "additionalProperties": false
        },
        "AnonymousCheck": {
            "type": "object",
            "description": "Check to find any anonymous type structures used.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Check to find any anonymous type structures used.",
                    "properties": {
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 0
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "Anonymous"
                    ],
                    "type": "string",
                    "description": "Check to find any anonymous type structures used."
                }
            },
            "additionalProperties": false
        },
        "TypeDocCommentCheck": {
            "type": "object",
            "description": "Checks code documentation on type level",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks code documentation on type level",
                    "properties": {
                        "tokens": {
                            "items": {
                                "enum": [
                                    "ABSTRACT_DEF",
                                    "CLASS_DEF",
                                    "ENUM_DEF",
                                    "INTERFACE_DEF",
                                    "TYPEDEF_DEF"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "matches only comment docs for types specified in tokens list:\n\t\t- ABSTRACT_DEF = abstract definition \"abstract Test {}\"\n\t\t- CLASS_DEF = class definition \"class Test {}\"\n\t\t- ENUM_DEF = enum definition \"enum Test {}\"\n\t\t- INTERFACE_DEF = interface definition \"interface Test {}\"\n\t\t- TYPEDEF_DEF = typdef definition \"typedef Test = {}\"",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "TypeDocComment"
                    ],
                    "type": "string",
                    "description": "Checks code documentation on type level"
                }
            },
            "additionalProperties": false
        },
        "RedundantAllowMetaCheck": {
            "type": "object",
            "description": "Checks for redundant @:allow metadata",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for redundant @:allow metadata",
                    "properties": {
                        "prohibitMeta": {
                            "type": "boolean",
                            "description": "switches behaviour of check to\n\t\t- false = look for redundant access modifications\n\t\t- true = to discourage its use everywhere",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "RedundantAllowMeta"
                    ],
                    "type": "string",
                    "description": "Checks for redundant @:allow metadata"
                }
            },
            "additionalProperties": false
        },
        "CatchParameterNameCheck": {
            "type": "object",
            "description": "Checks that catch parameter names conform to a format specified by the `format` property.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks that catch parameter names conform to a format specified by the `format` property.",
                    "properties": {
                        "format": {
                            "type": "string",
                            "description": "regex name format",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "CatchParameterName"
                    ],
                    "type": "string",
                    "description": "Checks that catch parameter names conform to a format specified by the `format` property."
                }
            },
            "additionalProperties": false
        },
        "InnerAssignmentCheck": {
            "type": "object",
            "description": "Checks for assignments in subexpressions, such as in `if ((a=b) > 0) return;`.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for assignments in subexpressions, such as in `if ((a=b) > 0) return;`.",
                    "properties": {
                        "ignoreReturnAssignments": {
                            "type": "boolean",
                            "description": "ignores assignments in return statements",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "InnerAssignment"
                    ],
                    "type": "string",
                    "description": "Checks for assignments in subexpressions, such as in `if ((a=b) > 0) return;`."
                }
            },
            "additionalProperties": false
        },
        "TypeCheck": {
            "type": "object",
            "description": "Checks if type is specified or not for member variables.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks if type is specified or not for member variables.",
                    "properties": {
                        "ignoreEnumAbstractValues": {
                            "type": "boolean",
                            "description": "ignores fields inside abstract enums",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "Type"
                    ],
                    "type": "string",
                    "description": "Checks if type is specified or not for member variables."
                }
            },
            "additionalProperties": false
        },
        "TabForAligningCheck": {
            "type": "object",
            "description": "Checks if there are any tabs in the middle of a line.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks if there are any tabs in the middle of a line.",
                    "properties": {
                        "ignorePattern": {
                            "type": "string",
                            "description": "ignore linex matching regex",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "TabForAligning"
                    ],
                    "type": "string",
                    "description": "Checks if there are any tabs in the middle of a line."
                }
            },
            "additionalProperties": false
        },
        "ModifierOrderCheck": {
            "type": "object",
            "description": "Checks that the order of modifiers conforms to the standards.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks that the order of modifiers conforms to the standards.",
                    "properties": {
                        "modifiers": {
                            "items": {
                                "enum": [
                                    "PUBLIC_PRIVATE",
                                    "INLINE",
                                    "STATIC",
                                    "OVERRIDE",
                                    "MACRO",
                                    "DYNAMIC"
                                ],
                                "type": "string",
                                "description": "list of modifiers\n\t- PUBLIC_PRIVATE = public / private modifier\n\t- INLINE = inline modifier\n\t- STATIC = static modifier\n\t- OVERRIDE = override modifier\n\t- MACRO = macro modifier\n\t- DYNAMIC = dynamic modifier\n\t- EXTERN = extern modifier\n\t- FINAL = final modifier"
                            },
                            "type": "array",
                            "description": "order in which modifier should occur",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "ModifierOrder"
                    ],
                    "type": "string",
                    "description": "Checks that the order of modifiers conforms to the standards."
                }
            },
            "additionalProperties": false
        },
        "EmptyLinesCheck": {
            "type": "object",
            "description": "Checks for consecutive empty lines (default is 1). Also have options to check empty line separators after package, single-line and multi-line comments and class/interface/abstract declarations.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for consecutive empty lines (default is 1). Also have options to check empty line separators after package, single-line and multi-line comments and class/interface/abstract declarations.",
                    "properties": {
                        "requireEmptyLineAfterPackage": {
                            "type": "boolean",
                            "description": "require an empty line after package definition",
                            "propertyOrder": 3
                        },
                        "requireEmptyLineAfterInterface": {
                            "type": "boolean",
                            "description": "require an empty line after interface keyword",
                            "propertyOrder": 5
                        },
                        "requireEmptyLineAfterAbstract": {
                            "type": "boolean",
                            "description": "require an empty line after abstract keyword",
                            "propertyOrder": 6
                        },
                        "allowEmptyLineAfterSingleLineComment": {
                            "type": "boolean",
                            "description": "allow empty lines after a single line comment",
                            "propertyOrder": 1
                        },
                        "max": {
                            "type": "integer",
                            "description": "number of empty lines to allow",
                            "propertyOrder": 0
                        },
                        "requireEmptyLineAfterClass": {
                            "type": "boolean",
                            "description": "require an empty line after class keyword",
                            "propertyOrder": 4
                        },
                        "allowEmptyLineAfterMultiLineComment": {
                            "type": "boolean",
                            "description": "allow empty lines after a mutli line comment",
                            "propertyOrder": 2
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 7
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "EmptyLines"
                    ],
                    "type": "string",
                    "description": "Checks for consecutive empty lines (default is 1). Also have options to check empty line separators after package, single-line and multi-line comments and class/interface/abstract declarations."
                }
            },
            "additionalProperties": false
        },
        "VariableInitialisationCheck": {
            "type": "object",
            "description": "Checks for instance variables that are initialised at class level.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for instance variables that are initialised at class level.",
                    "properties": {
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 0
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "VariableInitialisation"
                    ],
                    "type": "string",
                    "description": "Checks for instance variables that are initialised at class level."
                }
            },
            "additionalProperties": false
        },
        "SeparatorWrapCheck": {
            "type": "object",
            "description": "Checks line wrapping with separators.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks line wrapping with separators.",
                    "properties": {
                        "tokens": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "list mof wrapping tokens",
                            "propertyOrder": 0
                        },
                        "option": {
                            "enum": [
                                "eol",
                                "nl"
                            ],
                            "type": "string",
                            "description": "policy for wrapping token\n\t\t- eol = wrapping token should be at end of line\n\t\t- nl = wrapping token should start a new line",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 2
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "SeparatorWrap"
                    ],
                    "type": "string",
                    "description": "Checks line wrapping with separators."
                }
            },
            "additionalProperties": false
        },
        "SimplifyBooleanReturnCheck": {
            "type": "object",
            "description": "Checks for over-complicated boolean return statements.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for over-complicated boolean return statements.",
                    "properties": {
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 0
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "SimplifyBooleanReturn"
                    ],
                    "type": "string",
                    "description": "Checks for over-complicated boolean return statements."
                }
            },
            "additionalProperties": false
        },
        "RightCurlyCheck": {
            "type": "object",
            "description": "Checks the placement of right curly braces (`}`) for code blocks. The policy to verify is specified using the property `option`.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks the placement of right curly braces (`}`) for code blocks. The policy to verify is specified using the property `option`.",
                    "properties": {
                        "tokens": {
                            "items": {
                                "enum": [
                                    "CLASS_DEF",
                                    "ENUM_DEF",
                                    "ABSTRACT_DEF",
                                    "TYPEDEF_DEF",
                                    "INTERFACE_DEF",
                                    "OBJECT_DECL",
                                    "FUNCTION",
                                    "FOR",
                                    "IF",
                                    "WHILE",
                                    "SWITCH",
                                    "TRY",
                                    "CATCH",
                                    "REIFICATION",
                                    "ARRAY_COMPREHENSION"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "matches only right curlys specified in tokens list:\n\t\t- CLASS_DEF = class definition \"class Test {}\"\n\t\t- ENUM_DEF = enum definition \"enum Test {}\"\n\t\t- ABSTRACT_DEF = abstract definition \"abstract Test {}\"\n\t\t- TYPEDEF_DEF = typdef definition \"typedef Test = {}\"\n\t\t- INTERFACE_DEF = interface definition \"interface Test {}\"\n\t\t- OBJECT_DECL = object declaration \"{ x: 0, y: 0, z: 0}\"\n\t\t- FUNCTION = function body \"funnction test () {}\"\n\t\t- FOR = for body \"for (i in 0..10) {}\"\n\t\t- IF = if / else body \"if (test) {} else {}\"\n\t\t- WHILE = while body \"while (test) {}\"\n\t\t- SWITCH = switch / case body \"switch (test) { case: {} default: {} }\"\n\t\t- TRY = try body \"try {}\"\n\t\t- CATCH = catch body \"catch (e:Dynamic) {}\"\n\t\t- REIFICATION = macro reification \"$i{}\"\n\t\t- ARRAY_COMPREHENSION = array comprehension \"[for (i in 0...10) {i * 2}]\"",
                            "propertyOrder": 0
                        },
                        "option": {
                            "enum": [
                                "same",
                                "alone",
                                "aloneorsingle"
                            ],
                            "type": "string",
                            "description": "placement of right curly\n\t\t- same = right curly must be alone on a new line, except for \"} else\" and \"} catch\"\n\t\t- alone = alone on a new line\n\t\t- aloneorsingle = right curly can occur on same line as left curly or must be alone on a new line",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 2
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "RightCurly"
                    ],
                    "type": "string",
                    "description": "Checks the placement of right curly braces (`}`) for code blocks. The policy to verify is specified using the property `option`."
                }
            },
            "additionalProperties": false
        },
        "ReturnCheck": {
            "type": "object",
            "description": "Warns if Void is used for return or if return type is not specified when returning.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Warns if Void is used for return or if return type is not specified when returning.",
                    "properties": {
                        "enforceReturnTypeForAnonymous": {
                            "type": "boolean",
                            "description": "enforces return type for anonymous functions",
                            "propertyOrder": 2
                        },
                        "allowEmptyReturn": {
                            "type": "boolean",
                            "description": "allows empty return which is mostly used to exit functions.",
                            "propertyOrder": 0
                        },
                        "enforceReturnType": {
                            "type": "boolean",
                            "description": "enforces return type for every function",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 3
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "Return"
                    ],
                    "type": "string",
                    "description": "Warns if Void is used for return or if return type is not specified when returning."
                }
            },
            "additionalProperties": false
        },
        "ExcludeConfig": {
            "type": "object",
            "description": "defines filters to exclude folders, types or files from all or specific checks",
            "properties": {
                "RightCurly": {
                    "propertyOrder": 56,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "path": {
                    "enum": [
                        "RELATIVE_TO_PROJECT",
                        "RELATIVE_TO_SOURCE"
                    ],
                    "type": "string",
                    "description": "filters excludes relative to\n\t- RELATIVE_TO_PROJECT = use project root\n\t- RELATIVE_TO_SOURCE = use path(s) specified via \"-s <path>\" command line switches",
                    "propertyOrder": 0
                },
                "CatchParameterName": {
                    "propertyOrder": 9,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "VariableInitialisation": {
                    "propertyOrder": 73,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "HexadecimalLiteral": {
                    "propertyOrder": 23,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "MethodLength": {
                    "propertyOrder": 36,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "HiddenField": {
                    "propertyOrder": 24,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "MethodCount": {
                    "propertyOrder": 35,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "RedundantModifier": {
                    "propertyOrder": 53,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "PublicAccessor": {
                    "propertyOrder": 50,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "NestedIfDepth": {
                    "propertyOrder": 43,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "Interface": {
                    "propertyOrder": 28,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "ArrayAccess": {
                    "propertyOrder": 5,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "MagicNumber": {
                    "propertyOrder": 33,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "Spacing": {
                    "propertyOrder": 61,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "UnusedImport": {
                    "propertyOrder": 71,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "EmptyPackage": {
                    "propertyOrder": 19,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "OperatorWhitespace": {
                    "propertyOrder": 46,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "NeedBraces": {
                    "propertyOrder": 41,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "ParameterName": {
                    "propertyOrder": 48,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "LineLength": {
                    "propertyOrder": 30,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "EmptyLines": {
                    "propertyOrder": 18,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "TypeDocComment": {
                    "propertyOrder": 68,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "MultipleVariableDeclarations": {
                    "propertyOrder": 40,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "ERegLiteral": {
                    "propertyOrder": 16,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "AvoidInlineConditionals": {
                    "propertyOrder": 7,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "WhitespaceAfter": {
                    "propertyOrder": 74,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "FileLength": {
                    "propertyOrder": 22,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "AvoidStarImport": {
                    "propertyOrder": 8,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "ModifierOrder": {
                    "propertyOrder": 38,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "ExtendedEmptyLines": {
                    "propertyOrder": 20,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "version": {
                    "minimum": 1,
                    "type": "integer",
                    "maximum": 1,
                    "description": "version number",
                    "propertyOrder": 2
                },
                "SeparatorWrap": {
                    "propertyOrder": 58,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "WhitespaceAround": {
                    "propertyOrder": 75,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "ListenerName": {
                    "propertyOrder": 31,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "": {
                    "propertyOrder": 3,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "CyclomaticComplexity": {
                    "propertyOrder": 12,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "all": {
                    "description": "exclude matching files from all checks",
                    "propertyOrder": 1,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "SimplifyBooleanExpression": {
                    "propertyOrder": 59,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "SeparatorWhitespace": {
                    "propertyOrder": 57,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "TrailingWhitespace": {
                    "propertyOrder": 66,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "Dynamic": {
                    "propertyOrder": 15,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "RedundantAccessMeta": {
                    "propertyOrder": 51,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "LeftCurly": {
                    "propertyOrder": 29,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "ParameterNumber": {
                    "propertyOrder": 49,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "MethodName": {
                    "propertyOrder": 37,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "UnusedLocalVar": {
                    "propertyOrder": 72,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "IndentationCharacter": {
                    "propertyOrder": 26,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "ArrayLiteral": {
                    "propertyOrder": 6,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "MemberName": {
                    "propertyOrder": 34,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "TypeName": {
                    "propertyOrder": 69,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "InnerAssignment": {
                    "propertyOrder": 27,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "UnnecessaryConstructor": {
                    "propertyOrder": 70,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "MultipleStringLiterals": {
                    "propertyOrder": 39,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "RedundantAllowMeta": {
                    "propertyOrder": 52,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "Anonymous": {
                    "propertyOrder": 4,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "NestedTryDepth": {
                    "propertyOrder": 44,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "SimplifyBooleanReturn": {
                    "propertyOrder": 60,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "TODOComment": {
                    "propertyOrder": 63,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "ConstantName": {
                    "propertyOrder": 11,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "DocCommentStyle": {
                    "propertyOrder": 14,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "FieldDocComment": {
                    "propertyOrder": 21,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "Trace": {
                    "propertyOrder": 65,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "NullableParameter": {
                    "propertyOrder": 45,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "TabForAligning": {
                    "propertyOrder": 64,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "EmptyBlock": {
                    "propertyOrder": 17,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "NestedForDepth": {
                    "propertyOrder": 42,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "StringLiteral": {
                    "propertyOrder": 62,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "ConditionalCompilation": {
                    "propertyOrder": 10,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "Type": {
                    "propertyOrder": 67,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "OperatorWrap": {
                    "propertyOrder": 47,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "ReturnCount": {
                    "propertyOrder": 55,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "Indentation": {
                    "propertyOrder": 25,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "DefaultComesLast": {
                    "propertyOrder": 13,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "Return": {
                    "propertyOrder": 54,
                    "$ref": "#/definitions/ExcludeFilterList"
                },
                "LocalVariableName": {
                    "propertyOrder": 32,
                    "$ref": "#/definitions/ExcludeFilterList"
                }
            },
            "additionalProperties": false
        },
        "ConditionalCompilationCheck": {
            "type": "object",
            "description": "Checks placement and indentation of conditional compilation flags.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks placement and indentation of conditional compilation flags.",
                    "properties": {
                        "policy": {
                            "enum": [
                                "startOfLine",
                                "aligned"
                            ],
                            "type": "string",
                            "description": "indentation of conditional statements\n\t    - startOfLine = #if, #else, #elseif and #end must start at beginning of line\n\t    - aligned = indentation of #if, #else, #elseif and #end must match surrounding code\n\n\t\tBoth \"aligned\" and \"startOfLine\" will produce a message if conditional compilation flags are not on a separate line.\n\t\tAll #else, #elseif and #end flags must have the same indentation as their corresponding #if.",
                            "propertyOrder": 0
                        },
                        "allowSingleline": {
                            "type": "boolean",
                            "description": "allows or prevents using single line conditional compilation flags.",
                            "propertyOrder": 1
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 2
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "ConditionalCompilation"
                    ],
                    "type": "string",
                    "description": "Checks placement and indentation of conditional compilation flags."
                }
            },
            "additionalProperties": false
        },
        "WhitespaceAfterCheck": {
            "type": "object",
            "description": "Checks for whitespace after a token.",
            "properties": {
                "props": {
                    "type": "object",
                    "description": "Checks for whitespace after a token.",
                    "properties": {
                        "tokens": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "supported list of tokens:\n\t\t\",\", \";\", \"(\", \"[\", \"{\", \":\", \".\", \"=\", \"+\", \"-\", \"*\", \"/\", \"%\", \">\", \"<\", \">=\", \"<=\", \"==\", \"!=\",\n\t\t\"&\", \"|\", \"^\", \"&&\", \"||\", \"<<\", \">>\", \">>>\", \"+=\", \"-=\", \"*=\", \"/=\", \"%=\", \"<<=\", \">>=\", \">>>=\", \"|=\", \"&=\",\n\t\t\"^=\", \"...\", \"=>\", \"!\", \"++\", \"--\",",
                            "propertyOrder": 0
                        },
                        "severity": {
                            "enum": [
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "IGNORE"
                            ],
                            "type": "string",
                            "description": "sets gravity of reported violations:\n    - IGNORE = do not report violations, violations do not appear anywhere in output\n    - INFO = all violations have info / lowest priority\n    - WARNING = all violations have warning / medium priority\n    - ERROR = all violations have error / highest priority",
                            "propertyOrder": 1
                        }
                    },
                    "additionalProperties": false
                },
                "type": {
                    "enum": [
                        "WhitespaceAfter"
                    ],
                    "type": "string",
                    "description": "Checks for whitespace after a token."
                }
            },
            "additionalProperties": false
        }
    }
}